import React, { useState, useEffect, useRef } from 'react';
import Swal from 'sweetalert2';
import 'bootstrap/dist/css/bootstrap.min.css';
import useWebSocket from './hooks/useWebSocket';

function App() {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [queue, setQueue] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [showResults, setShowResults] = useState(false);
  const playerRef = useRef(null);
  const [isYTReady, setIsYTReady] = useState(false);
  const isSkippingRef = useRef(false);
  const isManualSkipRef = useRef(false);
  const isLoadingNewVideoRef = useRef(false);
  const currentVideoIdRef = useRef(null);

  const baseURL = 'http://192.168.20.111:5000';
  const wsURL = 'ws://192.168.20.111:5000';

  const { isConnected: isWsConnected, sendMessage } = useWebSocket(wsURL, (data) => {
    if (data.type === 'queue_updated') {
      fetchQueue();
    }
  });

    const [isMobile, setIsMobile] = useState(false);

useEffect(() => {
  const checkMobile = () => {
    setIsMobile(window.innerWidth < 768);
  };

  checkMobile();
  window.addEventListener('resize', checkMobile);

  return () => window.removeEventListener('resize', checkMobile);
}, []);

  useEffect(() => {
    if (window.YT && window.YT.Player) {
      setIsYTReady(true);
      return;
    }

    window.onYouTubeIframeAPIReady = () => {
      setIsYTReady(true);
    };

    if (!document.querySelector('script[src="https://www.youtube.com/iframe_api"]')) {
      const tag = document.createElement('script');
      tag.src = 'https://www.youtube.com/iframe_api';
      document.body.appendChild(tag);
    }
  }, []);
const removeSong = async (videoId) => {
  try {
    const res = await fetch(`${baseURL}/api/remove?videoId=${videoId}`, {
      method: 'DELETE',
    });
    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
  } catch (err) {
    console.error('removeSong error:', err);
  }
};
  const fetchQueue = async () => {
  try {
    const res = await fetch(`${baseURL}/api/queue`);
    if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
    const data = await res.json();
    const newQueue = data.queue || [];

    setQueue((prevQueue) => {
      const isChanged =
        prevQueue.length !== newQueue.length ||
        prevQueue.some((item, index) => item.videoId !== newQueue[index]?.videoId);

      if (isChanged) {
        // ‡∏ñ‡πâ‡∏≤ queue ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏∞‡πÑ‡∏£ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        if (!isMobile && playerRef.current) {
          const state = playerRef.current.getPlayerState?.();
          if (state === -1 || state === window.YT.PlayerState.ENDED || state === undefined) {
            const nextVideoId = newQueue[currentIndex]?.videoId;
            if (nextVideoId) {
              console.log("üîÅ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏•‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å queue update:", nextVideoId);
              playerRef.current.loadVideoById(nextVideoId);
            }
          }
        }
      }

      return isChanged ? newQueue : prevQueue;
    });
  } catch (err) {
    setError(`‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: ${err.message}`);
  }
};

  const handleSearch = async () => {
    if (!query.trim()) return;
    setLoading(true);
    setError('');
    try {
      const res = await fetch(`${baseURL}/api/search?q=${encodeURIComponent(query)}`);
      if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
      const data = await res.json();
      setResults(data.results || []);
      setShowResults(true);
    } catch (err) {
      setError(`‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  const addSong = async (video) => {
    const result = await Swal.fire({
      title: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á "${video.title}" ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ñ‡∏¥‡∏ß?`,
      icon: 'question',
      showCancelButton: true,
      confirmButtonText: '‡πÄ‡∏û‡∏¥‡πà‡∏°',
      cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
    });

    if (result.isConfirmed) {
      try {
        const res = await fetch(`${baseURL}/api/add`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(video),
        });

        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);

        sendMessage({ type: 'add_song', song: video });

        setShowResults(false);
        Swal.fire('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '', 'success');
      } catch (err) {
        setError(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${err.message}`);
      }
    }
  };

const autoNextSong = async () => {
  const currentVideoId = queue[currentIndex]?.videoId;
  if (!currentVideoId) return;

  // ‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  await removeSong(currentVideoId);

  // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
  setCurrentIndex((prevIndex) => {
    const nextIndex = prevIndex + 1;
    if (nextIndex < queue.length) {
      console.log('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà index', nextIndex);
      return nextIndex;
    } else {
      console.log('‡∏´‡∏°‡∏î‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á');
      return prevIndex; // ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
    }
  });

  // ‡πÉ‡∏´‡πâ server ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï queue ‡πÉ‡∏´‡πâ client ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (optional)
  sendMessage({ type: 'song_removed', videoId: currentVideoId });
};
const skipSong = async () => {
  if (queue.length === 0 || isSkippingRef.current) return;

  const result = await Swal.fire({
    title: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: '‡∏Ç‡πâ‡∏≤‡∏°',
    cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å',
  });

  if (result.isConfirmed) {
    isSkippingRef.current = true;
    isManualSkipRef.current = true;

    try {
      // ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏° currentIndex ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      setCurrentIndex((prevIndex) => {
        const nextIndex = prevIndex + 1;
        return nextIndex < queue.length ? nextIndex : 0; // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏™‡∏∏‡∏î ‡πÉ‡∏´‡πâ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏£‡∏Å
      });

      // ‡∏™‡∏±‡πà‡∏á‡∏•‡∏ö‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å queue (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
      const currentVideoId = queue[currentIndex]?.videoId;
      if (currentVideoId) {
        await removeSong(currentVideoId);
      }

      Swal.fire('‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß', '', 'success');
    } catch (err) {
      console.error('skipSong error:', err);
      Swal.fire('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '', 'error');
    } finally {
      isSkippingRef.current = false;
      isManualSkipRef.current = false;
    }
  }
};

useEffect(() => {
  if (isMobile || !window.YT || queue.length === 0) return;

  const currentVideoId = queue[currentIndex]?.videoId;
  console.log('useEffect currentVideoId:', currentVideoId);

  if (!playerRef.current) {
    playerRef.current = new window.YT.Player('yt-player', {
      videoId: currentVideoId,
      width: '100%',
      height: '600',
      events: {
        onReady: () => console.log('Player ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß'),
        onStateChange: (event) => {
          if (event.data === window.YT.PlayerState.ENDED) {
            autoNextSong();
          }
        },
      },
    });
  } else {
    const currentPlayerVideoId = playerRef.current.getVideoData()?.video_id;
    if (currentPlayerVideoId !== currentVideoId) {
      playerRef.current.loadVideoById(currentVideoId);
    }
  }
}, [queue, currentIndex, isMobile]);




  useEffect(() => {
    if (isWsConnected) {
      fetchQueue();
    }
  }, [isWsConnected]);

  return (
    <div className="container py-4 card rounded" style={{ backgroundColor: '#121212', minHeight: '100vh', color: '#eee' }}>
      <h1 className="mb-4 text-center">üéµ ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ö‡∏ö Real-time</h1>

      <div className="mb-2">
        {isWsConnected ? (
          <span className="text-success">‚óè ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß</span>
        ) : (
          <span className="text-danger">‚óè ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå...</span>
        )}
      </div>

      <div className="input-group mb-3">
        <input
          type="text"
          className="form-control"
          placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏û‡∏•‡∏á YouTube..."
          value={query}
          onChange={(e) => setQuery(e.target.value)}
        />
        <button className="btn btn-primary" onClick={handleSearch} disabled={loading}>
          {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...' : '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'}
        </button>
      </div>

      {showResults && results.length > 0 && (
        <div className="list-group mb-4 ">
          {results.map((video, index) => (
            <button
              key={index}
              className="list-group-item list-group-item-action d-flex align-items-center"
              onClick={() => addSong(video)}
            >
              <img src={video.thumbnail} alt="" width={60} className="me-2" />
              {video.title}
            </button>
          ))}
        </div>
      )}

      <h3>üéß ‡∏Ñ‡∏¥‡∏ß‡πÄ‡∏û‡∏•‡∏á</h3>
      <ul className="list-group mb-3">
        {queue.map((song, index) => (
          <li
            key={index}
            className={`list-group-item d-flex justify-content-between align-items-center ${
              index === currentIndex ? 'active bg-success text-white' : ''
            }`}
          >
            {song.title}
          </li>
        ))}
      </ul>

{!isMobile && (
  <div id="yt-player" className="mb-4" />
)}

      <div className="text-center">
        <button className="btn btn-warning" onClick={skipSong}>
          ‚è≠ ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏•‡∏á
        </button>
      </div>
    </div>
  );
}

export default App;
